from aiogram import types, Bot
from aiogram.dispatcher import Dispatcher
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor

from db import BotDB

BotDB = BotDB('UsatuBot_Database.db')

bot = Bot(token='–¢–æ–∫–µ–Ω_–±–æ—Ç–∞')
dp = Dispatcher(bot, storage=MemoryStorage())


class Step_data(StatesGroup):
    waiting = State()
    st_start = State()
    menu = State()
    to_menu = State()
    ex_del = State()
    dir_search = State()
    about_un = State()
    admission = State()
    dir_test = State()
    dir_test_1 = State()
    dir_test_2 = State()


def reg_inl_key():
    buttons = [types.InlineKeyboardButton(text="–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", callback_data="ex_math"),
               types.InlineKeyboardButton(text="–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", callback_data="ex_rus"),
               types.InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", callback_data="ex_inf"),
               types.InlineKeyboardButton(text="–§–∏–∑–∏–∫–∞", callback_data="ex_phy"),
               types.InlineKeyboardButton(text="–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ", callback_data="ex_soc"),
               types.InlineKeyboardButton(text="–•–∏–º–∏—è", callback_data="ex_chem")]
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    keyboard.add(*buttons)
    return keyboard


def menu_text():
    menu = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é! \n \n–° –ø–æ–º–æ—â—å—é –º–µ–Ω—é –≤—ã –º–æ–∂–µ—Ç–µ: \n‚ñ´Ô∏è –û–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å –ø–µ—Ä–µ—á–Ω–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –æ–±—É—á–µ–Ω–∏—è " \
           "–≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ü–µ—Ä–µ—á–µ–Ω—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π¬ª. \n‚ñ´Ô∏è –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ, –µ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞—Ö, –∞ —Ç–∞–∫–∂–µ –≤–æ–µ–Ω–Ω–æ–π –∫–∞—Ñ–µ–¥—Ä–µ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–û–± " \
           "—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ¬ª. \n‚ñ´Ô∏è –ü–æ–ª—É—á–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–µ–º–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ¬ª. \n‚ñ´Ô∏è " \
           "–î–æ–±–∞–≤–ª—è—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–∏—Ö —ç–∫–∑–∞–º–µ–Ω–∞—Ö –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ü—Ä–æ—Ñ–∏–ª—å –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞¬ª. \n‚ñ´Ô∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å " \
           "—Å–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π, –∫—É–¥–∞ –º–æ–∂–Ω–æ –ø–æ—Å—Ç—É–ø–∏—Ç—å —Å –≤–∞—à–∏–º–∏ —ç–∫–∑–∞–º–µ–Ω–∞–º–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–í–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –≤–∞—Å¬ª. "
    return menu


def menu_key():
    buttons = ["–ü–µ—Ä–µ—á–µ–Ω—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π", "–û–± —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ", "–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ", "–ü—Ä–æ—Ñ–∏–ª—å –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞",
               "–í–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –≤–∞—Å"]
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*buttons)
    return keyboard


def profile_out(user_id):
    text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ—Ñ–∏–ª—å –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞! \n \n –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —ç–∫–∑–∞–º–µ–Ω–æ–≤, " \
           "–∞ —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –∏ —É–¥–∞–ª–∏—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ —ç–∫–∑–∞–º–µ–Ω—ã üìù\n "
    text += exam_out(user_id)
    return text


def exam_out(user_id):
    exams_def = BotDB.user_exam_out(user_id)
    if len(exams_def):
        numb = 1
        exams = "\n –í–∞—à–∏ —ç–∫–∑–∞–º–µ–Ω—ã: \n"
        for i in range(len(exams_def)):
            exams += f" {numb}.   {exams_def[i]} \n"
            numb += 1
    else:
        exams = "\n–í—ã –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ —ç–∫–∑–∞–º–µ–Ω—ã, –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–∫–∑–∞–º–µ–Ω–æ–≤ –Ω–∞–∂–º–∏—Ç–µ ¬´–î–æ–±–∞–≤–∏—Ç—å —ç–∫–∑–∞–º–µ–Ω—ã¬ª ‚òπÔ∏è"
    return exams


def profile_inl_key():
    buttons = [types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —ç–∫–∑–∞–º–µ–Ω—ã", callback_data="ex_add"),
               types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —ç–∫–∑–∞–º–µ–Ω—ã", callback_data="ex_del")]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    return keyboard


def menu_dir_out():
    text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–µ—Ä–µ—á–µ–Ω—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π! \n \n –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –æ–±—É—á–µ–Ω–∏—è –¥–ª—è " \
           "–±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç–∞ –∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Ç–µ—Ç–∞ üìã \n "
    return text


def dir_out():
    dir_def = BotDB.dir_out()
    direct = ["", "", "", "", ""]
    direct[0] = "\n –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è: \n"
    j = 0
    i = 0
    while i < (len(dir_def)):
        while i < (len(dir_def)) and (len(direct[j])) < 3800:
            direct[
                j] += f"\n{dir_def[i + 1]}  {dir_def[i + 2]} \nüìù –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–∫–∑–∞–º–µ–Ω—ã: {dir_def[i + 3]}, {dir_def[i + 4]}, {dir_def[i + 5]}.\n‚úÖ –ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª –Ω–∞ –±—é–¥–∂–µ—Ç –ø—Ä–æ—à–ª–æ–≥–æ –≥–æ–¥–∞: {dir_def[i + 6]}\n"
            i += 7
        j += 1
    return direct


def dir_inl_key():
    buttons = [types.InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö...", callback_data="dir_search")]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    return keyboard


def opt_dir_inl_key():
    buttons = [types.InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö...", callback_data="dir_search"),
               types.InlineKeyboardButton(text="–ü–æ–¥–æ–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É...", callback_data="optimal_dir")]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    return keyboard


def dir_adv_inl_key():
    buttons = [types.InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö...", callback_data="dir_search"),
               types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é", callback_data="dir_exit")]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    return keyboard


def to_menu_inl():
    buttons = [types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é", callback_data="dir_exit")]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    return keyboard


def dir_water_out(value):
    dir_def = BotDB.dir_water_out(value)
    direct = ""
    i = 0
    while i < (len(dir_def)):
        direct += f"\n{dir_def[i]}"
        i += 1
    return direct


def dir_suitable_out(user_id):
    dir_def = BotDB.dir_rec_out(user_id)
    direct = ["", "", "", "", ""]
    direct[0] = "\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –ø–æ–¥—Ö–æ–¥—è—Ç: \n"
    j = 0
    i = 0
    while i < (len(dir_def)):
        while i < (len(dir_def)) and (len(direct[j])) < 3800:
            direct[
                j] += f"\n{dir_def[i + 1]}  {dir_def[i + 2]} \nüìù –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–∫–∑–∞–º–µ–Ω—ã: {dir_def[i + 3]}, {dir_def[i + 4]}, {dir_def[i + 5]}.\n‚úÖ –ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª –Ω–∞ –±—é–¥–∂–µ—Ç –ø—Ä–æ—à–ª–æ–≥–æ –≥–æ–¥–∞: {dir_def[i + 6]}\n"
            i += 7
        j += 1
    return direct


def about_text_gen():
    text = "‚úàÔ∏è –£–ì–ê–¢–£ ‚Äì —è–≤–ª—è–µ—Ç—Å—è –æ–¥–Ω–∏–º –∏–∑ —Å–∞–º—ã—Ö –ø—Ä–µ—Å—Ç–∏–∂–Ω—ã—Ö –≤—É–∑–æ–≤ —Ä–µ—Å–ø—É–±–ª–∏–∫–∏ –ë–∞—à–∫–æ—Ä—Ç–æ—Å—Ç–∞–Ω, –∞ —Ç–∞–∫–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ —á–∏—Å–ª–µ —Å–∞–º—ã—Ö " \
           "–ø–µ—Ä–µ–¥–æ–≤—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤—É–∑–æ–≤ –†–æ—Å—Å–∏–∏.\n \n–û–± —ç—Ç–æ–º –≥–æ–≤–æ—Ä—è—Ç –æ—Ü–µ–Ω–∫–∏ –º–∏—Ä–æ–≤—ã—Ö —Ä–µ–ø—É—Ç–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–µ–π—Ç–∏–Ω–≥–æ–≤: " \
           "–®–∞–Ω—Ö–∞–π—Å–∫–æ–≥–æ, RUR Reputation Rankings, Times Higher Education, –ø—Ä–æ–µ–∫—Ç–∞ ¬´–°–æ—Ü–∏–∞–ª—å–Ω—ã–π –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä¬ª –∏ –¥—Ä. –¢–∞–∫–∂–µ " \
           "–£–ì–ê–¢–£ –ø–µ—Ä–≤—ã–º –≤ –†–æ—Å—Å–∏–∏ –Ω–∞—á–∞–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –ø—Ä–æ–≥—Ä–∞–º–º—ã —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –±–∏—Ä–∂–∏ —Ç—Ä—É–¥–∞ –¥–ª—è –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤.\n \nüè¢–£–ì–ê–¢–£ –≤ " \
           "—Ü–∏—Ñ—Ä–∞—Ö: \n–ë–æ–ª–µ–µ 16 —Ç—ã—Å—è—á —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –∞—Å–ø–∏—Ä–∞–Ω—Ç–æ–≤, –±–æ–ª–µ–µ 1000 –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π, –≤ —Ç–æ–º —á–∏—Å–ª–µ –æ–∫–æ–ª–æ 160 " \
           "–¥–æ–∫—Ç–æ—Ä–æ–≤ –∏ 550 –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞—É–∫."
    return text


def about_text_gen_1():
    text = "üìö–í –£–ì–ê–¢–£ —Ä–∞—Å–ø–æ–ª–∞–≥–∞—é—Ç—Å—è 4 —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞, 2 –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞, –∞ —Ç–∞–∫–∂–µ –≤–æ–µ–Ω–Ω—ã–π —É—á–µ–±–Ω—ã–π —Ü–µ–Ω—Ç—Ä."
    return text


def about_inl_key():
    buttons = [types.InlineKeyboardButton(text="–û —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞—Ö", callback_data="about_fac"),
               types.InlineKeyboardButton(text="–û –≤–æ–µ–Ω–Ω–æ–π –∫–∞—Ñ–µ–¥—Ä–µ", callback_data="about_arm"),
               types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é", callback_data="about_exit")]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    return keyboard


def about_fac_inl_key():
    buttons = [types.InlineKeyboardButton(text="–û –≤–æ–µ–Ω–Ω–æ–π –∫–∞—Ñ–µ–¥—Ä–µ", callback_data="about_arm"),
               types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é", callback_data="about_exit")]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    return keyboard


def about_arm_inl_key():
    buttons = [types.InlineKeyboardButton(text="–û —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞—Ö", callback_data="about_fac"),
               types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é", callback_data="about_exit")]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    return keyboard


def about_fac_out():
    about_def = BotDB.about_fac_out()
    about = ["", "", "", "", "", "", ""]
    about[0] = "\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞—Ö:\n"
    i = 0
    while i < (len(about_def)):
        about[i] += f"\n{about_def[i]}"
        i += 1
    return about


def about_arm_out():
    about_def = BotDB.about_arm_out()
    about = ["", "", ""]
    about[0] = "\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–æ–µ–Ω–Ω–æ–π –∫–∞—Ñ–µ–¥—Ä–µ:\n"
    i = 0
    while i < (len(about_def)):
        about[i] += f"\n{about_def[i]}\n"
        i += 1
    return about


def about_ad_key():
    buttons = ["–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã", "–°—Ä–æ–∫–∏ –∏ –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–∏–µ–º–∞", "–ö–∞–∫ –ø–æ—Å—Ç—É–ø–∏—Ç—å?", "–ë—é–¥–∂–µ—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ",
               "–¶–µ–ª–µ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "–ü–ª–∞—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é"]
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*buttons)
    return keyboard


def about_ad_text():
    text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ!\n \n–í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –Ω–∞–π–¥–µ—Ç–µ –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ " \
           "–ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –£–ì–ê–¢–£. \n" \
           "\nüìù –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤—ã –º–æ–∂–µ—Ç–µ –≤ –ø—É–Ω–∫—Ç–µ ¬´–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ " \
           "–¥–æ–∫—É–º–µ–Ω—Ç—ã\n \nüïë –£–∑–Ω–∞—Ç—å –æ —Å—Ä–æ–∫–∞—Ö, –∏ –≥—Ä–∞—Ñ–∏–∫–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–µ–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ –≤ –ø—É–Ω–∫—Ç–µ ¬´–°—Ä–æ–∫–∏ –∏ –≥—Ä–∞—Ñ–∏–∫ " \
           "–ø—Ä–∏–µ–º–∞¬ª\n \n‚ùì –£–∑–Ω–∞—Ç—å –æ —Ç–æ–º, –∫–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ, –≤—ã –º–æ–∂–µ—Ç–µ –≤ –ø—É–Ω–∫—Ç–µ ¬´–ö–∞–∫ –ø–æ—Å—Ç—É–ø–∏—Ç—å?¬ª\n \nüèõ –ü–æ–ª—É—á–∏—Ç—å " \
           "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—é–¥–∂–µ—Ç–Ω–æ–π —Ñ–æ—Ä–º–µ –æ–±—É—á–µ–Ω–∏—è –≤—ã –º–æ–∂–µ—Ç–µ –≤ –ø—É–Ω–∫—Ç–µ ¬´–ë—é–¥–∂–µ—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ¬ª\n \nüîß –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é " \
           "–æ —Ü–µ–ª–µ–≤–æ–π —Ñ–æ—Ä–º–µ –æ–±—É—á–µ–Ω–∏—è –≤—ã –º–æ–∂–µ—Ç–µ –≤ –ø—É–Ω–∫—Ç–µ ¬´–¶–µ–ª–µ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ¬ª\n \nüíµ –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–Ω–æ–º " \
           "–æ–±—É—á–µ–Ω–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ –≤ –ø—É–Ω–∫—Ç–µ ¬´–ü–ª–∞—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ¬ª "
    return text


def about_add_out(value):
    about_def = BotDB.about_admission(value)
    about = ""
    for i in range(len(about_def)):
        about += f"{about_def[i]}\n"
    return about


@dp.message_handler(commands="start", state="*")
async def start(message: types.Message):
    if not BotDB.user_exists(message.from_user.id):
        BotDB.add_user(message.from_user.id)
    start_message = '–ü—Ä–∏–≤–µ—Ç, —è –£–ì–ê–¢–£.bot üëã \n'
    start_message += '\n–° –º–æ–µ–π –ø–æ–º–æ—â—å—é –í—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∫–∞—Å–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è, ' \
                     '–ø–æ–¥–æ–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –ø–æ–¥—Ö–æ–¥—è—Ç –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ üî• \n '
    start_message += '\n–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –≤–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö —ç–∫–∑–∞–º–µ–Ω–æ–≤?'
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–í–≤–µ—Å—Ç–∏ —ç–∫–∑–∞–º–µ–Ω—ã", "–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é"]
    keyboard.add(*buttons)
    await message.answer(start_message, reply_markup=keyboard)
    await Step_data.st_start.set()


@dp.message_handler(state=Step_data.st_start, content_types=types.ContentTypes.TEXT)
async def step_start(message: types.Message):
    dp.message_handler(content_types=['text'])
    answ = message.text
    if answ == "–í–≤–µ—Å—Ç–∏ —ç–∫–∑–∞–º–µ–Ω—ã":
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —ç–∫–∑–∞–º–µ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Å–¥–∞–≤–∞–ª–∏:', reply_markup=reg_inl_key())
        await Step_data.to_menu.set()
    elif answ == "–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é":
        await message.answer(menu_text(), reply_markup=menu_key())
        await Step_data.menu.set()
    else:
        await message.answer('–Ø —Ç–∞–∫ –Ω–µ —É–º–µ—é, –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–Ω–æ–ø–æ–∫!')
        await Step_data.st_start.set()


@dp.message_handler(state=Step_data.to_menu, content_types=types.ContentTypes.TEXT)
async def step_start(message: types.Message):
    dp.message_handler(content_types=['text'])
    answ = message.text
    if answ == "–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é":
        await message.answer(menu_text(), reply_markup=menu_key())
        await Step_data.menu.set()
    else:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button = types.KeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é")
        keyboard.add(button)
        await message.answer("–ü–æ—Å–ª–µ –≤–≤–µ–¥–µ–Ω–∏—è —ç–∫–∑–∞–º–µ–Ω–æ–≤ –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é.", reply_markup=keyboard)
        await Step_data.to_menu.set()


@dp.callback_query_handler(text="ex_math", state=Step_data.to_menu)
async def send_math(call: types.CallbackQuery):
    value = "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"
    if (BotDB.user_exam_exists(call.from_user.id, value)) < 1:
        BotDB.add_record(call.from_user.id, value)
        await call.answer(text="–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —ç–∫–∑–∞–º–µ–Ω–æ–≤!", show_alert=True)
    else:
        await call.answer(text="–í—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ –º–∞—Ç–µ–º–∞—Ç–∏–∫—É –≤ —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —ç–∫–∑–∞–º–µ–Ω–æ–≤!")
    # await call.answer(text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


@dp.callback_query_handler(text="ex_rus", state=Step_data.to_menu)
async def send_rus(call: types.CallbackQuery):
    value = "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫"
    if (BotDB.user_exam_exists(call.from_user.id, value)) < 1:
        BotDB.add_record(call.from_user.id, value)
        await call.answer(text="–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —ç–∫–∑–∞–º–µ–Ω–æ–≤!", show_alert=True)
    else:
        await call.answer(text="–í—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –≤ —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —ç–∫–∑–∞–º–µ–Ω–æ–≤!")


@dp.callback_query_handler(text="ex_inf", state=Step_data.to_menu)
async def send_inf(call: types.CallbackQuery):
    value = "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞"
    if (BotDB.user_exam_exists(call.from_user.id, value)) < 1:
        BotDB.add_record(call.from_user.id, value)
        await call.answer(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —ç–∫–∑–∞–º–µ–Ω–æ–≤!", show_alert=True)
    else:
        await call.answer(text="–í—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫—É –≤ —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —ç–∫–∑–∞–º–µ–Ω–æ–≤!")


@dp.callback_query_handler(text="ex_phy", state=Step_data.to_menu)
async def send_phy(call: types.CallbackQuery):
    value = "–§–∏–∑–∏–∫–∞"
    if (BotDB.user_exam_exists(call.from_user.id, value)) < 1:
        BotDB.add_record(call.from_user.id, value)
        await call.answer(text="–§–∏–∑–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —ç–∫–∑–∞–º–µ–Ω–æ–≤!", show_alert=True)
    else:
        await call.answer(text="–í—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ —Ñ–∏–∑–∏–∫—É –≤ —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —ç–∫–∑–∞–º–µ–Ω–æ–≤!")


@dp.callback_query_handler(text="ex_soc", state=Step_data.to_menu)
async def send_soc(call: types.CallbackQuery):
    value = "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ"
    if (BotDB.user_exam_exists(call.from_user.id, value)) < 1:
        BotDB.add_record(call.from_user.id, value)
        await call.answer(text="–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —ç–∫–∑–∞–º–µ–Ω–æ–≤!", show_alert=True)
    else:
        await call.answer(text="–í—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ –æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —ç–∫–∑–∞–º–µ–Ω–æ–≤!")


@dp.callback_query_handler(text="ex_chem", state=Step_data.to_menu)
async def send_chem(call: types.CallbackQuery):
    value = "–•–∏–º–∏—è"
    if (BotDB.user_exam_exists(call.from_user.id, value)) < 1:
        BotDB.add_record(call.from_user.id, value)
        await call.answer(text="–•–∏–º–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —ç–∫–∑–∞–º–µ–Ω–æ–≤!", show_alert=True)
    else:
        await call.answer(text="–í—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ –•–∏–º–∏—é –≤ —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —ç–∫–∑–∞–º–µ–Ω–æ–≤!")


@dp.message_handler(state=Step_data.menu, content_types=types.ContentTypes.TEXT)
async def step_menu(message: types.Message):
    dp.message_handler(content_types=['text'])
    answ = message.text
    if answ == "–ü—Ä–æ—Ñ–∏–ª—å –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞":
        await message.answer(profile_out(message.from_user.id), reply_markup=profile_inl_key())
    elif answ == "–ü–µ—Ä–µ—á–µ–Ω—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π":
        await message.answer(menu_dir_out())
        text_dir = dir_out()
        for i in range(len(text_dir)):
            if len(text_dir[i]) > 0:
                await message.answer(text_dir[i], reply_markup=dir_inl_key())
    elif answ == "–û–± —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ":
        await message.answer(about_text_gen(), reply_markup=types.ReplyKeyboardRemove())
        await message.answer(about_text_gen_1(), reply_markup=about_inl_key())
        await Step_data.about_un.set()
    elif answ == "–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ":
        await message.answer(about_ad_text(), reply_markup=about_ad_key())
        await Step_data.admission.set()
    elif answ == "–í–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –≤–∞—Å":
        if BotDB.dir_rec_exist(message.from_user.id):
            suitable_dir = dir_suitable_out(message.from_user.id)
            for i in range(len(suitable_dir)):
                if len(suitable_dir[i]) > 0:
                    await message.answer(suitable_dir[i], reply_markup=opt_dir_inl_key())
        elif 1 <= BotDB.user_exam_check(message.from_user.id) < 3:
            await message.answer("–í–∞—à–∏—Ö —ç–∫–∑–∞–º–µ–Ω–æ–≤ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–∑ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –æ–±—É—á–µ–Ω–∏—è, –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è "
                                 "–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º 3 —ç–∫–∑–∞–º–µ–Ω–∞ üôÉ\n \n‚ùì –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —ç–∫–∑–∞–º–µ–Ω—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "
                                 "¬´–ü—Ä–æ—Ñ–∏–ª—å –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞¬ª", reply_markup=menu_key())
        elif BotDB.user_exam_check(message.from_user.id) == 0:
            await message.answer(
                "–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —ç–∫–∑–∞–º–µ–Ω–∞ ü§ï \n–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π –¥–æ–±–∞–≤—å—Ç–µ —ç–∫–∑–∞–º–µ–Ω—ã "
                "–≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ü—Ä–æ—Ñ–∏–ª—å –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞¬ª", reply_markup=menu_key())
        else:
            await message.answer("–°–æ–∂–∞–ª–µ–µ–º, –Ω–æ –º—ã –Ω–µ –Ω–∞—à–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –≤–∞–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è üò¢",
                                 reply_markup=menu_key())
    else:
        await message.answer('–Ø —Ç–∞–∫ –Ω–µ —É–º–µ—é, –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–Ω–æ–ø–æ–∫!')


@dp.callback_query_handler(text="ex_add", state=Step_data.menu)
async def add_ex(call: types.CallbackQuery):
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —ç–∫–∑–∞–º–µ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Å–¥–∞–≤–∞–ª–∏:', reply_markup=reg_inl_key())
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button = types.KeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é")
    keyboard.add(button)
    await call.message.answer("–î–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ\n¬´–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é¬ª", reply_markup=keyboard)
    await Step_data.to_menu.set()


@dp.callback_query_handler(text="ex_del", state=Step_data.menu)
async def del_ex(call: types.CallbackQuery):
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —ç–∫–∑–∞–º–µ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:', reply_markup=reg_inl_key())
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button = types.KeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é")
    keyboard.add(button)
    await call.message.answer("–î–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ\n¬´–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é¬ª", reply_markup=keyboard)
    await Step_data.ex_del.set()


@dp.callback_query_handler(text="ex_math", state=Step_data.ex_del)
async def del_math(call: types.CallbackQuery):
    value = "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"
    if (BotDB.user_exam_exists(call.from_user.id, value)) >= 1:
        BotDB.del_record(call.from_user.id, value)
        await call.answer(text="–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–∞—à–∏—Ö —ç–∫–∑–∞–º–µ–Ω–æ–≤!", show_alert=True)
    else:
        await call.answer(text="–í—ã —É–∂–µ —É–¥–∞–ª–∏–ª–∏ –º–∞—Ç–µ–º–∞—Ç–∏–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–∞—à–∏—Ö —ç–∫–∑–∞–º–µ–Ω–æ–≤!")


@dp.callback_query_handler(text="ex_rus", state=Step_data.ex_del)
async def del_rus(call: types.CallbackQuery):
    value = "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫"
    if (BotDB.user_exam_exists(call.from_user.id, value)) >= 1:
        BotDB.del_record(call.from_user.id, value)
        await call.answer(text="–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–∞—à–∏—Ö —ç–∫–∑–∞–º–µ–Ω–æ–≤!", show_alert=True)
    else:
        await call.answer(text="–í—ã —É–∂–µ —É–¥–∞–ª–∏–ª–∏ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–∞—à–∏—Ö —ç–∫–∑–∞–º–µ–Ω–æ–≤!")


@dp.callback_query_handler(text="ex_inf", state=Step_data.ex_del)
async def del_inf(call: types.CallbackQuery):
    value = "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞"
    if (BotDB.user_exam_exists(call.from_user.id, value)) >= 1:
        BotDB.del_record(call.from_user.id, value)
        await call.answer(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–∞—à–∏—Ö —ç–∫–∑–∞–º–µ–Ω–æ–≤!", show_alert=True)
    else:
        await call.answer(text="–í—ã —É–∂–µ —É–¥–∞–ª–∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–∞—à–∏—Ö —ç–∫–∑–∞–º–µ–Ω–æ–≤!")


@dp.callback_query_handler(text="ex_phy", state=Step_data.ex_del)
async def del_phy(call: types.CallbackQuery):
    value = "–§–∏–∑–∏–∫–∞"
    if (BotDB.user_exam_exists(call.from_user.id, value)) >= 1:
        BotDB.del_record(call.from_user.id, value)
        await call.answer(text="–§–∏–∑–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–∞—à–∏—Ö —ç–∫–∑–∞–º–µ–Ω–æ–≤!", show_alert=True)
    else:
        await call.answer(text="–í—ã —É–∂–µ —É–¥–∞–ª–∏–ª–∏ —Ñ–∏–∑–∏–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–∞—à–∏—Ö —ç–∫–∑–∞–º–µ–Ω–æ–≤!")


@dp.callback_query_handler(text="ex_soc", state=Step_data.ex_del)
async def del_soc(call: types.CallbackQuery):
    value = "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ"
    if (BotDB.user_exam_exists(call.from_user.id, value)) >= 1:
        BotDB.del_record(call.from_user.id, value)
        await call.answer(text="–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–∞—à–∏—Ö —ç–∫–∑–∞–º–µ–Ω–æ–≤!", show_alert=True)
    else:
        await call.answer(text="–í—ã —É–∂–µ —É–¥–∞–ª–∏–ª–∏ –æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–∞—à–∏—Ö —ç–∫–∑–∞–º–µ–Ω–æ–≤!")


@dp.callback_query_handler(text="ex_chem", state=Step_data.ex_del)
async def del_chem(call: types.CallbackQuery):
    value = "–•–∏–º–∏—è"
    if (BotDB.user_exam_exists(call.from_user.id, value)) >= 1:
        BotDB.del_record(call.from_user.id, value)
        await call.answer(text="–•–∏–º–∏—è —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–∞—à–∏—Ö —ç–∫–∑–∞–º–µ–Ω–æ–≤!", show_alert=True)
    else:
        await call.answer(text="–í—ã —É–∂–µ —É–¥–∞–ª–∏–ª–∏ –•–∏–º–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–∞—à–∏—Ö —ç–∫–∑–∞–º–µ–Ω–æ–≤!")


@dp.message_handler(state=Step_data.ex_del, content_types=types.ContentTypes.TEXT)
async def step_start(message: types.Message):
    dp.message_handler(content_types=['text'])
    answ = message.text
    if answ == "–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é":
        await message.answer(menu_text(), reply_markup=menu_key())
        await Step_data.menu.set()
    else:
        await message.answer('–Ø —Ç–∞–∫ –Ω–µ —É–º–µ—é, –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–Ω–æ–ø–æ–∫!')


@dp.callback_query_handler(text="dir_search", state=Step_data.menu)
async def dir_call(call: types.CallbackQuery):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button = types.KeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é")
    keyboard.add(button)
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –ø—Ä–∏–º. ¬´09.03.01¬ª', reply_markup=keyboard)
    await Step_data.dir_search.set()


@dp.message_handler(state=Step_data.dir_search, content_types=types.ContentTypes.TEXT)
async def dir_search(message: types.Message):
    dp.message_handler(content_types=['text'])
    answ = message.text
    if (BotDB.dir_exists(answ)) == 1:
        await message.answer(text=dir_water_out(answ), reply_markup=dir_adv_inl_key())
    elif answ == "–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é":
        await message.answer(menu_text(), reply_markup=menu_key())
        await Step_data.menu.set()
    else:
        await message.answer('–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è!', reply_markup=dir_adv_inl_key())


@dp.callback_query_handler(text="dir_exit", state=Step_data.dir_search)
async def dir_call_exit(call: types.CallbackQuery):
    await call.message.answer(menu_text(), reply_markup=menu_key())
    await Step_data.menu.set()


@dp.callback_query_handler(text="about_fac", state=Step_data.about_un)
async def abot_fac(call: types.CallbackQuery):
    text_dir = about_fac_out()
    for i in range(len(text_dir)):
        if len(text_dir[i]) > 0:
            if i + 1 == len(text_dir):
                await call.message.answer(text_dir[i], reply_markup=about_fac_inl_key())
            else:
                await call.message.answer(text_dir[i], reply_markup=types.ReplyKeyboardRemove())


@dp.callback_query_handler(text="about_arm", state=Step_data.about_un)
async def about_arm(call: types.CallbackQuery):
    text_dir = about_arm_out()
    for i in range(len(text_dir)):
        if len(text_dir[i]) > 0:
            if i + 1 == len(text_dir):
                await call.message.answer(text_dir[i], reply_markup=about_arm_inl_key())
            else:
                await call.message.answer(text_dir[i], reply_markup=types.ReplyKeyboardRemove())


@dp.callback_query_handler(text="about_exit", state=Step_data.about_un)
async def about_exit(call: types.CallbackQuery):
    await call.message.answer(menu_text(), reply_markup=menu_key())
    await Step_data.menu.set()


@dp.message_handler(state=Step_data.admission, content_types=types.ContentTypes.TEXT)
async def about_ad_menu(message: types.Message):
    dp.message_handler(content_types=['text'])
    answ = message.text
    if answ == "–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é":
        await message.answer(menu_text(), reply_markup=menu_key())
        await Step_data.menu.set()
    elif answ == "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã":
        value = 3
        text_dir = about_add_out(value)
        await message.answer(text_dir, reply_markup=about_ad_key())
    elif answ == "–°—Ä–æ–∫–∏ –∏ –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–∏–µ–º–∞":
        value = 4
        text_dir = about_add_out(value)
        await message.answer(text_dir, reply_markup=about_ad_key())
    elif answ == "–ö–∞–∫ –ø–æ—Å—Ç—É–ø–∏—Ç—å?":
        value = 5
        text_dir = about_add_out(value)
        await message.answer(text_dir, reply_markup=about_ad_key())
    elif answ == "–ë—é–¥–∂–µ—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ":
        value = 6
        text_dir = about_add_out(value)
        await message.answer(text_dir, reply_markup=about_ad_key())
    elif answ == "–¶–µ–ª–µ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ":
        value = 7
        text_dir = about_add_out(value)
        await message.answer(text_dir, reply_markup=about_ad_key())
    elif answ == "–ü–ª–∞—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ":
        value = 8
        text_dir = about_add_out(value)
        await message.answer(text_dir, reply_markup=about_ad_key())
    else:
        await message.answer('–Ø —Ç–∞–∫ –Ω–µ —É–º–µ—é, –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–Ω–æ–ø–æ–∫!')


def test_err_1():
    text = "–°–æ–∂–∞–ª–µ–µ–º, –Ω–æ –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å –≤–∞—à–∏–º–∏ —ç–∫–∑–∞–º–µ–Ω–∞–º–∏, –¥–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ üò¢ \n \n–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è " \
           "–¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å —ç–∫–∑–∞–º–µ–Ω–æ–º ¬´–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞¬ª üíª "
    return text


def test_err_2():
    text = "–°–æ–∂–∞–ª–µ–µ–º, –Ω–æ –¥–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å —ç–∫–∑–∞–º–µ–Ω–æ–º ¬´–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞¬ª üò¢ " \
           "\n \n "
    return text


def test_err_inl_key():
    buttons = [types.InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç..", callback_data="test_comp")]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    return keyboard


def test_0():
    text = "–í—ã –Ω–∞—á–∞–ª–∏ –Ω–∞—á–∞–ª–∏ —Ç–µ—Å—Ç, –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å —ç–∫–∑–∞–º–µ–Ω–æ–º ¬´–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞¬ª üíª"
    return text


def test_1():
    text = "–ß—Ç–æ –≤–∞–º –±–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, " \
           "–∂–µ–ª–µ–∑–æ –∏–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ? "
    return text


def test_21():
    text = "–í–∞—Å –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (–º–∏–∫—Ä–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤, –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤ –∏ –ø—Ä.) –∏–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º (" \
           "—Å—Ç–∞–Ω–∫–∏, —Ä–æ–±–æ—Ç—ã –∏ –ø—Ä.)? "
    return text


def test_22():
    text = "–ß—Ç–æ –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –≤–∞—Å –±–æ–ª—å—à–µ, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –∑–∞—â–∏—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏?"
    return text


def test_23():
    text = "–í—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å ¬´–ü–û¬ª –∏–ª–∏ –µ–≥–æ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å?"
    return text


def test_3():
    text = "–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ¬´–ü–û¬ª?"
    return text


def test_1_inl_key():
    buttons = [types.InlineKeyboardButton(text="¬´–ü–û¬ª", callback_data="test_po"),
               types.InlineKeyboardButton(text="–ò —Ç–æ, –∏ –¥—Ä—É–≥–æ–µ", callback_data="test_all"),
               types.InlineKeyboardButton(text="¬´–ñ–µ–ª–µ–∑–æ¬ª", callback_data="test_metal")]
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    keyboard.add(*buttons)
    return keyboard


def test_21_inl_key():
    buttons = [types.InlineKeyboardButton(text="–ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤", callback_data="test_comp"),
               types.InlineKeyboardButton(text="–°–∏—Å—Ç–µ–º", callback_data="test_sys")]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    return keyboard


def test_22_inl_key():
    buttons = [types.InlineKeyboardButton(text="–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="test_prg"),
               types.InlineKeyboardButton(text="–ó–∞—â–∏—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", callback_data="test_zi")]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    return keyboard


def test_23_inl_key():
    buttons = [types.InlineKeyboardButton(text="–†–∞–±–æ—Ç–∞—Ç—å", callback_data="test_wor"),
               types.InlineKeyboardButton(text="–†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å", callback_data="test_dev")]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    return keyboard


def test_3_inl_key():
    buttons = [types.InlineKeyboardButton(text="–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å", callback_data="test_prog"),
               types.InlineKeyboardButton(text="–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="test_proect")]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    return keyboard


def test_dir_out(user_id):
    dir_def = BotDB.user_dir_out(user_id)
    direct = ["", "", "", "", ""]
    direct[0] = "üí° –ü–µ—Ä–µ—á–µ–Ω—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞—à–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º: \n"
    j = 0
    i = 0
    while i < (len(dir_def)):
        while i < (len(dir_def)) and (len(direct[j])) < 3800:
            direct[
                j] += f"\n{dir_def[i + 1]}  {dir_def[i + 2]} \nüìù –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–∫–∑–∞–º–µ–Ω—ã: {dir_def[i + 3]}, {dir_def[i + 4]}, {dir_def[i + 5]}.\n‚úÖ –ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª –Ω–∞ –±—é–¥–∂–µ—Ç –ø—Ä–æ—à–ª–æ–≥–æ –≥–æ–¥–∞: {dir_def[i + 6]}\n"
            i += 7
        j += 1
    return direct


def opt_dir_adv_inl_key():
    buttons = [types.InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö...", callback_data="dir_search"),
               types.InlineKeyboardButton(text="–ü–æ–¥–æ–±—Ä—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ...", callback_data="optimal_dir_restart")]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    return keyboard


@dp.callback_query_handler(text="optimal_dir_restart", state=Step_data.menu)
async def opt_dir_rest_call(call: types.CallbackQuery):
    value = ''
    BotDB.user_dir_add(call.from_user.id, value)
    if BotDB.user_dir_flag_out(call.from_user.id) == [None] or BotDB.user_dir_flag_out(call.from_user.id) == ['']:
        if BotDB.user_exam_check(call.from_user.id) == 3:
            if "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞" in BotDB.user_exam_out(call.from_user.id):
                await call.message.answer(test_0(), reply_markup=types.ReplyKeyboardRemove())
                await call.message.answer(test_1(), reply_markup=test_1_inl_key())
                await Step_data.dir_test.set()
            else:
                await call.message.answer(test_err_1())
        else:
            await call.message.answer(test_err_2(), reply_markup=types.ReplyKeyboardRemove())
            text = ""
            text += f'{test_0()}\n \n{test_1()}'
            await call.message.answer(text, reply_markup=test_1_inl_key())
            await Step_data.dir_test.set()


@dp.callback_query_handler(text="optimal_dir", state=Step_data.menu)
async def opt_dir_call(call: types.CallbackQuery):
    if BotDB.user_dir_flag_out(call.from_user.id) == [None] or BotDB.user_dir_flag_out(call.from_user.id) == ['']:
        if BotDB.user_exam_check(call.from_user.id) == 3:
            if "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞" in BotDB.user_exam_out(call.from_user.id):
                await call.message.answer(test_0(), reply_markup=types.ReplyKeyboardRemove())
                await call.message.answer(test_1(), reply_markup=test_1_inl_key())
                await Step_data.dir_test.set()
            else:
                await call.message.answer(test_err_1())
        else:
            await call.message.answer(test_err_2(), reply_markup=types.ReplyKeyboardRemove())
            text = ""
            text += f'{test_0()}\n \n{test_1()}'
            await call.message.answer(text, reply_markup=test_1_inl_key())
            await Step_data.dir_test.set()
    else:
        suitable_dir = test_dir_out(call.from_user.id)
        for i in range(len(suitable_dir)):
            if len(suitable_dir[i]) > 0:
                await call.message.answer(suitable_dir[i], reply_markup=opt_dir_adv_inl_key())


@dp.callback_query_handler(text="test_metal", state=Step_data.dir_test)
async def opt_dir_call_1(call: types.CallbackQuery):
    await call.message.answer(test_21(), reply_markup=test_21_inl_key())
    await Step_data.dir_test_1.set()


@dp.callback_query_handler(text="test_all", state=Step_data.dir_test)
async def opt_dir_call_2(call: types.CallbackQuery):
    await call.message.answer(test_22(), reply_markup=test_22_inl_key())
    await Step_data.dir_test_1.set()


@dp.callback_query_handler(text="test_po", state=Step_data.dir_test)
async def opt_dir_call_3(call: types.CallbackQuery):
    await call.message.answer(test_23(), reply_markup=test_23_inl_key())
    await Step_data.dir_test_1.set()


@dp.callback_query_handler(text="test_dev", state=Step_data.dir_test_1)
async def opt_dir_call_4(call: types.CallbackQuery):
    await call.message.answer(test_3(), reply_markup=test_3_inl_key())
    await Step_data.dir_test_2.set()


@dp.callback_query_handler(text="test_prog", state=Step_data.dir_test_2)
async def opt_dir_call_5(call: types.CallbackQuery):
    value = "B"
    BotDB.user_dir_add(call.from_user.id, value)
    suitable_dir = test_dir_out(call.from_user.id)
    for i in range(len(suitable_dir)):
        if len(suitable_dir[i]) > 0:
            await call.message.answer(suitable_dir[i], reply_markup=dir_adv_inl_key())
    await Step_data.menu.set()


@dp.callback_query_handler(text="test_proect", state=Step_data.dir_test_2)
async def opt_dir_call_6(call: types.CallbackQuery):
    value = "C"
    BotDB.user_dir_add(call.from_user.id, value)
    suitable_dir = test_dir_out(call.from_user.id)
    for i in range(len(suitable_dir)):
        if len(suitable_dir[i]) > 0:
            await call.message.answer(suitable_dir[i], reply_markup=dir_adv_inl_key())
    await Step_data.menu.set()


@dp.callback_query_handler(text="test_wor", state=Step_data.dir_test_1)
async def opt_dir_call_7(call: types.CallbackQuery):
    value = "A"
    BotDB.user_dir_add(call.from_user.id, value)
    suitable_dir = test_dir_out(call.from_user.id)
    for i in range(len(suitable_dir)):
        if len(suitable_dir[i]) > 0:
            await call.message.answer(suitable_dir[i], reply_markup=dir_adv_inl_key())
    await Step_data.menu.set()


@dp.callback_query_handler(text="test_zi", state=Step_data.dir_test_1)
async def opt_dir_call_8(call: types.CallbackQuery):
    value = "E"
    BotDB.user_dir_add(call.from_user.id, value)
    suitable_dir = test_dir_out(call.from_user.id)
    for i in range(len(suitable_dir)):
        if len(suitable_dir[i]) > 0:
            await call.message.answer(suitable_dir[i], reply_markup=dir_adv_inl_key())
    await Step_data.menu.set()


@dp.callback_query_handler(text="test_prg", state=Step_data.dir_test_1)
async def opt_dir_call_9(call: types.CallbackQuery):
    value = "D"
    BotDB.user_dir_add(call.from_user.id, value)
    suitable_dir = test_dir_out(call.from_user.id)
    for i in range(len(suitable_dir)):
        if len(suitable_dir[i]) > 0:
            await call.message.answer(suitable_dir[i], reply_markup=dir_adv_inl_key())
    await Step_data.menu.set()


@dp.callback_query_handler(text="test_sys", state=Step_data.dir_test_1)
async def opt_dir_call_10(call: types.CallbackQuery):
    value = "G"
    BotDB.user_dir_add(call.from_user.id, value)
    suitable_dir = test_dir_out(call.from_user.id)
    for i in range(len(suitable_dir)):
        if len(suitable_dir[i]) > 0:
            await call.message.answer(suitable_dir[i], reply_markup=dir_adv_inl_key())
    await Step_data.menu.set()


@dp.callback_query_handler(text="test_comp", state=Step_data.dir_test_1)
async def opt_dir_call_11(call: types.CallbackQuery):
    value = "F"
    BotDB.user_dir_add(call.from_user.id, value)
    suitable_dir = test_dir_out(call.from_user.id)
    for i in range(len(suitable_dir)):
        if len(suitable_dir[i]) > 0:
            await call.message.answer(suitable_dir[i], reply_markup=dir_adv_inl_key())
    await Step_data.menu.set()


@dp.callback_query_handler(text="dir_exit", state=Step_data.menu)
async def dir_call_exit(call: types.CallbackQuery):
    await call.message.answer(menu_text(), reply_markup=menu_key())
    await Step_data.menu.set()


executor.start_polling(dp)
